str_extract(contact_vcf, "(>?=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?>=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?=>TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?!TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?=!TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "((?!TEL;CHARSET=utf-8;WORK;VOICE:)).*")
str_extract(contact_vcf, "((?=!TEL;CHARSET=utf-8;WORK;VOICE:)).*")
str_extract(contact_vcf, "((?=TEL;CHARSET=utf-8;WORK;VOICE:)).*")
str_extract(contact_vcf, "^(?!(TEL;CHARSET=utf-8;WORK;VOICE:)).*")
str_extract(contact_vcf, "^(?!(TEL;CHARSET=utf-8;WORK;VOICE:))")
str_extract(contact_vcf, "^(?!(TEL;CHARSET=utf-8;WORK;VOICE:)).*")
str_extract(contact_vcf, "^(?:TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "^(?<==3D)TEL;CHARSET=utf-8;WORK;VOICE:.*")
str_extract(contact_vcf, "^(?<==TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "^(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract_all(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).* \\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).* \1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1.*$")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1.*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1")
str_extract_all(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1.*")
str_extract_all(contact_vcf, "((?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1.*)")
str_extract(contact_vcf, "((?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1.*)")
str_extract(contact_vcf, "((?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1)")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1")
str_extract_all(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\\1")
str_extract_all(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*\1")
str_extract_all(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?\\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:)?.*\\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:)?.*\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?\1")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:)?.*")
str_extract(contact_vcf, "((?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?)")
str_extract(contact_vcf, "((?<=TEL;CHARSET=utf-8;WORK;VOICE:).*)?")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?(?=_)")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?(?=TEL;CHARSET=utf-8;WORK;VOICE:)")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*?(?=)")
extract_phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
extract_phone
extract_phone[str_detect(extract_phone, "(\d)")]
extract_phone[str_detect(extract_phone, "(\\d)")]
extract_phone[str_detect(extract_phone, "\(\\d\)")]
extract_phone[str_detect(extract_phone, "\\(\\d\\)")]
extract_phone[str_detect(extract_phone, "\\(\\d\\).*")]
str_detect(extract_phone, "\\(\\d\\).*")
str_detect(extract_phone, "\\(\\d+\\).*")
extract_phone[str_detect(extract_phone, "\\(\\d+\\).*")]
extract_phone[str_detect(extract_phone, "\\(\\d+\\)\\s+\\d{1,}")]
extract_phone[str_detect(extract_phone, "\\(\\[0-2]+\\)\\s+\\d{1,}")]
extract_phone[str_detect(extract_phone, "\\(\\[0,2]+\\)\\s+\\d{1,}")]
str_detect(extract_phone, "\\(\\[0,2]+\\)\\s+\\d{1,}")
str_detect(extract_phone, "\\(\\[0-2]+\\)\\s+\\d{1,}")
str_detect(extract_phone, "\\(\\[0-2]*\\)\\s+\\d{1,}")
str_detect(extract_phone, "\\(\\[02]*\\)\\s+\\d{1,}")
str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")
extract_phone[str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")]
extract_phone <- extract_phone[str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")]
extract_phone[extract_phone!=""]
unique(extract_phone[extract_phone!=""])
unique(extract_phone[extract_phone != NA])
extract_phone[extract_phone != NA]
extract_phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
extract_phone <- extract_phone[str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")]
unique(extract_phone[extract_phone != NA])
extract_phone
extract_phone != NA
unique(extract_phone[extract_phone != ""])
extract_phone[extract_phone != ""]
unique(extract_phone[extract_phone != NULL])
extract_phone != NULL
is.na(extract_phone)
is.null(extract_phone)
typeof(extract_phone)
unique(extract_phone[extract_phone != "NA"])
unique(extract_phone[extract_phone != " "])
contact_vcf
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*")
title
title[title != NA]
title != NA
title
str_extract(title, "[가-힣].*")
title[title != NA ]
title[title == NA ]
title[str_detect(title, NA) ]
title[str_detect(title, is.na) ]
title[str_detect(title, "[가-힣].*") ]
title[!str_detect(title, "[가-힣].*") ]
title[str_detect(title, "[가-힣].*") ]
na.omit(title)
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
title
paste0(title, "..")
phone <- extract_phone[str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")]  %>% na.omit()
phone
contact_vcf
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
name
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>% na.omit()
address
contact_vcf
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
extract_phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*")
phone <- extract_phone[str_detect(extract_phone, "\\([0-2]+\\)\\s+\\d{1,}")]  %>% na.omit()
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>% na.omit()
```{r}
library(ymlthis)
biz_card_kim <- pagedown_business_card_template(
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "biz_card_logo.png",
.repeat = 1
)
biz_card_kim
address
str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*")
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
address
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
phone
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_kim <- pagedown_business_card_template(
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "fig/biz_card_logo.png",
.repeat = 2
)
biz_card_kim
biz_card_yml <- pagedown_business_card_template(
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml
biz_card_yml %>%
write_lines("data/biz_card.yml")
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
knitr::opts_chunk$set(echo = TRUE)
rmarkdown::render("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
biz_card_yml <- pagedown_business_card_template(
title = "MR.",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
biz_card_yml
biz_card_yml %>%
write_as_toml("data/biz_card.Rmd")
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output()
biz_card_yml %>%
yml_output(pagedown::business_card())
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card())
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
? write_yaml
library(yaml)
? write_yaml
biz_card_yml %>%
yml_output(pagedown::business_card())
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
write("---", "data/biz_card.Rmd", append=TRUE)
? write
write("---", "data/biz_card.Rmd", append=FALSE)
cat("---", "data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", overwrite = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml)
cat("---", "\n", final_yml, "\n", "---")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
final_yml <- read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
final_yml
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed
yml_file_fixed <- paste0("---", "\n", final_yml, "\n", "---")
yml_file_fixed
final_yml
lag(final_yml)
? lag
lag(final_yml, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
length(yml_file_fixed)
yml_file_fixed[length(yml_file_fixed)] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- lag(yml_file_fixed, default = "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: install-abbyyR
# devtools::install_github("soodoku/abbyyR", build_vignettes = TRUE)
library(abbyyR)
setapp(c(Sys.getenv("ABBYY_ID"), Sys.getenv("ABBYY_PW")))
getAppInfo()
# Chunk 3: ocr-text-korean
library(tidyverse)
library(magick)
korean_doc <- image_read("fig/Korean.jpg")
korean_doc %>%
image_resize("500x")
# Chunk 4: ocr-text-korean-process
ocr_task <- processImage(file_path = "fig/Korean.jpg", language = "Korean", exportFormat = "txtUnstructured")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=ocr_task$id)
# Chunk 5: ocr-text-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == ocr_task$id)
# Chunk 6: ocr-text-korean-process-save-display
ocred_path_filename <- glue::glue("data/{ocr_task$id}")
ocr_text <- read_lines(ocred_path_filename)
ocr_text
# Chunk 7: biz-card-image
library(tidyverse)
library(magick)
biz_card <- image_read("fig/biz_card.png")
biz_card %>%
image_resize("300x")
# Chunk 8: biz-card-ocr
biz_card_ocr <- processBusinessCard(file_path = "fig/biz_card.png", language = "Korean", exportFormat = "vCard")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=biz_card_ocr$id)
# Chunk 9: biz-card-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
## 다운로드 받은 명함 OCR 파일 --> 확장자 부여
vCard_name <- glue::glue("data/{biz_card_ocr$id}")
system(glue::glue("mv {vCard_name} data/contact_kim.vcf"), intern = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == biz_card_ocr$id)
# Chunk 10: biz-card-korean-process-save-display
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
# Chunk 11: create-pagedown-business-cards
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
# Chunk 12: create-business-card-markdownfile
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
# Chunk 13: create-pagedown-buisness-card
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
ocr_result
biz_card_ocr$id
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
mtcars
mtcars %>%
write_csv("data/mtcars.csv")
library(tidyverse)
mtcars %>%
write_csv("data/mtcars.csv")
library(googlesheets4)
mtcars_gsheet <- gs4_create("mtcars", sheets = mtcars)
? gs4_create
built_in_gsheet <- gs4_create("built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("_2020년/sugar_blood/data/built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("built_in_dataset",
locale = "fr_FR",
sheets = list(mtcars=mtcars, iris=iris))
googledrive::drive_get("built_in_dataset") %>%
read_sheet()
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
? read_sheet
mtcars_df <- read_sheet("https://docs.google.com/spreadsheets/d/1yemxGzjdqtNUvvi6VsNpl7-vuX_gs5RjvfkqEW0YNRs/edit#gid=537062310", sheet = "mtcars")
mtcars_df
