cat("---", "data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", overwrite = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml)
cat("---", "\n", final_yml, "\n", "---")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
final_yml <- read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
final_yml
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed
yml_file_fixed <- paste0("---", "\n", final_yml, "\n", "---")
yml_file_fixed
final_yml
lag(final_yml)
? lag
lag(final_yml, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
length(yml_file_fixed)
yml_file_fixed[length(yml_file_fixed)] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- lag(yml_file_fixed, default = "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: install-abbyyR
# devtools::install_github("soodoku/abbyyR", build_vignettes = TRUE)
library(abbyyR)
setapp(c(Sys.getenv("ABBYY_ID"), Sys.getenv("ABBYY_PW")))
getAppInfo()
# Chunk 3: ocr-text-korean
library(tidyverse)
library(magick)
korean_doc <- image_read("fig/Korean.jpg")
korean_doc %>%
image_resize("500x")
# Chunk 4: ocr-text-korean-process
ocr_task <- processImage(file_path = "fig/Korean.jpg", language = "Korean", exportFormat = "txtUnstructured")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=ocr_task$id)
# Chunk 5: ocr-text-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == ocr_task$id)
# Chunk 6: ocr-text-korean-process-save-display
ocred_path_filename <- glue::glue("data/{ocr_task$id}")
ocr_text <- read_lines(ocred_path_filename)
ocr_text
# Chunk 7: biz-card-image
library(tidyverse)
library(magick)
biz_card <- image_read("fig/biz_card.png")
biz_card %>%
image_resize("300x")
# Chunk 8: biz-card-ocr
biz_card_ocr <- processBusinessCard(file_path = "fig/biz_card.png", language = "Korean", exportFormat = "vCard")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=biz_card_ocr$id)
# Chunk 9: biz-card-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
## 다운로드 받은 명함 OCR 파일 --> 확장자 부여
vCard_name <- glue::glue("data/{biz_card_ocr$id}")
system(glue::glue("mv {vCard_name} data/contact_kim.vcf"), intern = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == biz_card_ocr$id)
# Chunk 10: biz-card-korean-process-save-display
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
# Chunk 11: create-pagedown-business-cards
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
# Chunk 12: create-business-card-markdownfile
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
# Chunk 13: create-pagedown-buisness-card
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
ocr_result
biz_card_ocr$id
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
mtcars
mtcars %>%
write_csv("data/mtcars.csv")
library(tidyverse)
mtcars %>%
write_csv("data/mtcars.csv")
library(googlesheets4)
mtcars_gsheet <- gs4_create("mtcars", sheets = mtcars)
? gs4_create
built_in_gsheet <- gs4_create("built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("_2020년/sugar_blood/data/built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("built_in_dataset",
locale = "fr_FR",
sheets = list(mtcars=mtcars, iris=iris))
googledrive::drive_get("built_in_dataset") %>%
read_sheet()
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
? read_sheet
mtcars_df <- read_sheet("https://docs.google.com/spreadsheets/d/1yemxGzjdqtNUvvi6VsNpl7-vuX_gs5RjvfkqEW0YNRs/edit#gid=537062310", sheet = "mtcars")
mtcars_df
install.packages("htmltidy")
library(tidyverse)
library(htmltidy)
xml_view("data/customer.xml")
? xml_view
xml_view("data/customer.xml")
xml_tree_view("data/customer.xml")
listviewer::
txt <- paste0("<note><to>Tove</to><from>Jani</from><heading>Reminder</heading>",
"<body>Don't forget me this weekend!</body></note>")
xml_view(txt)
listviewer::jsonedit("data/customer.xml")
listviewer::jsonedit("data/customer.xml")
require(xml2)
data <- xmlParse("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
xml_dat <- read_xml("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
xml_dat
xml_view(xml_dat)
xml_find_all(xml_dat, "location")
xml_node <- xml_children(xml_dat)
xml_node
xml_view(xml_node)
xml_tree_view(xml_node)
xml_tree_view(xml_dat)
xmltreeview-shiny(xml_dat)
xmltreeview-shiny(xml_dat)
xmltreeview_shiny(xml_dat)
xml_tree_view_shiny(xml_dat)
xml_tree_view-shiny(xml_dat)
xml_tree_view(xml_dat)
xml_find_all(xml_node, "point")
xmltreeview-shiny(xml_dat)
? `xmltreeview-shiny`
? xml_find_all
xml_find_all(xml_node, ".//point")
xml_lnglat <- xml_find_all(xml_node, ".//point")
tibble(
key = xml_lnglat %>% xml_name()
)
tibble(
key = xml_lnglat %>% xml_name(),
value = xml_lnglat %>% xml_text()
)
xml_lnglat %>% xml_text()
xml_lnglat <- xml_find_all(xml_node, ".//point")
xml_lnglat
map(xml_lnglat, xml_attrs)
map(xml_lnglat, xml_attrs) %>%
map_df(~as.list())
map(xml_lnglat, xml_attrs) %>%
map_df(~as.list(.))
map(xml_lnglat, xml_attrs)
geo_df <- map(xml_lnglat, xml_attrs) %>%
.[[1]]
geo_df
geo_df %>% class
food_xml <- read_xml("https://www.w3schools.com/xml/simple.xml")
food_xml <- read_xml("w3schools.com/xml/simple.xml")
food_xml <- read_xml("https://www.w3schools.com/xml/simple.xml")
xml_view(food_xml)
xml_find_all(food_xml, ".//food")
xml_children(food_xml)
xml_children(food_xml)
food_node <- xml_find_all(food_xml, ".//food")
xml_attr(food_node, "id")
xml_attr(food_node, "name")
food_node <- xml_find_all(food_xml, ".//food")
xml_children(food_xml)
xml_attr(food_node)
food_node
map(food_node, xml_attrs)
map(food_node, xml_attr)
map(food_node, xml_attrs)
food_node
xml_path(food_node)
xml_find_all(food_node, "/breakfast_menu/food[*]")
xml_children(food_xml)
xml_find_all(food_xml, "/breakfast_menu/food[*]")
food_node
xml_find_all(food_xml, "/breakfast_menu/food[*]")
xml_path(food_node)
xml_path(food_xml)
xml_find_all(food_xml, "/breakfast_menu/food[*]")
xml_find_all(food_node, "/breakfast_menu/food[*]")
xml_text(food_node)
food_df <- map(food_node, xml_attrs) %>%
map_df(~as.list(.))
food_df
map(food_node, xml_attrs)
food_df <- map(food_node, xml_attr) %>%
map_df(~as.list(.))
food_df
food_df <- map(food_node, xml_attr) %>%
map_df(~as.list(.))
food_df
xml_path(food_node)
xml_find_all(food_node, "/breakfast_menu/food[1]")
xml_find_all(food_node, "/breakfast_menu/food[*]")
xml_attr(xml_find_all(food_node, "/breakfast_menu/food[*]"), "name")
xml_attr(xml_find_all(food_node, "//breakfast_menu/food[*]"), "name")
xml_attr(xml_find_all(food_node, "//breakfast_menu//food[*]"), "name")
xml_attr(notifications[1], "name")
xml_attr(food_df[1], "name")
xml_attr(food_df[1], "name")
xml_attr(food_node[1], "name")
xml_attr(food_node[1], "price")
food_node
length(food_node)
var_length <- length(xml_children(food_nod[[1]]))
food_node[[1]]
var_length <- length(xml_children(food_node[[1]]))
var_length
food_df <- data.frame(matrix(NA, nrow=obs_length, ncol=var_length))
obs_length <- length(food_node)
var_length <- length(xml_children(food_node[[1]]))
food_df <- data.frame(matrix(NA, nrow=obs_length, ncol=var_length))
for (j in 1:obs_length) {
food_df[j, ] <- xml_text(xml_children(food_node[[j]]),trim=TRUE)
}
food_df
names(as_list(food_node[[1]]))
as_list(food_node[[1]])
food_df %>%
set_names(names(as_list(food_node[[1]])))
library(xml2)
data <- read_xml("http://forecast.weather.gov/MapClick.php?lat=29.803&lon=-82.411&FcstType=digitalDWML")
# Point locations
point <- data %>% xml_find_all("//point")
point %>% xml_attr("latitude") %>% as.numeric()
point %>% xml_attr("longitude") %>% as.numeric()
# Start time
data %>%
xml_find_all("//start-valid-time") %>%
xml_text()
# Temperature
data %>%
xml_find_all("//temperature[@type='hourly']/value") %>%
xml_text() %>%
as.integer()
xml_dat %>% xml_find_all("//point")
xml_view(xml_dat)
point %>% xml_attr("area-description")
point %>%  xml_find_all("//area-description")
point %>%  xml_find_all("//area-description") %>% as.character()
point %>%  xml_find_all("//area-description")
point %>%  xml_find_all("//area-description") %>% xml_text()
xml_dat %>% xml_find_all("//area-description") %>% xml_text()
point
# 측정시간
xml_dat %>%
xml_find_all("//start-valid-time") %>%
xml_text()
# 측정종료시간
xml_dat %>%
xml_find_all("//end-valid-time") %>%
xml_text()
# 측정종료시간
end_time <- xml_dat %>%
xml_find_all("//end-valid-time") %>%
xml_text()
xml_dat %>%
xml_find_all("//temperature")
xml_dat %>%
xml_find_all("//temperature/value")
xml_dat %>%
xml_find_all("//wind/value")
xml_dat %>%
xml_find_all("//wind[@type='degrees true']/value")
xml_dat %>%
xml_find_all("//wind[@type='hourly']/value")
xml_dat %>%
xml_find_all("//temperature[@type='hourly']/value")
xml_dat %>%
xml_find_all("//temperature[@type='hourly']/value")
xml_dat %>%
xml_find_all("//wind-speed[@type='sustained']/value")
xml_dat %>%
xml_find_all("//wind-speed[@type='sustained']/value") %>%
xml_text()
# 습도
xml_dat %>%
xml_find_all("//humidity [@type='relative']/value") %>%
xml_text() %>%
as.integer()
xml_dat %>%
xml_find_all("//humidity [@units='percent']/value") %>%
xml_text() %>%
as.integer()
# 온도
temperature <- xml_dat %>%
xml_find_all("//temperature[@type='hourly']/value") %>%
xml_text() %>%
as.integer()
# 풍속
wind <- xml_dat %>%
xml_find_all("//wind-speed[@type='sustained']/value") %>%
xml_text() %>%
as.integer()
# 습도
humidity <- xml_dat %>%
xml_find_all("//humidity[@type='relative']/value") %>%
xml_text() %>%
as.integer()
tibble(start_time = start_time,
temperature = temperature,
wind = wind,
humidity = humidity)
# 측정시작시간
start_time <- xml_dat %>%
xml_find_all("//start-valid-time") %>%
xml_text()
# 측정종료시간
end_time <- xml_dat %>%
xml_find_all("//end-valid-time") %>%
xml_text()
# 온도
temperature <- xml_dat %>%
xml_find_all("//temperature[@type='hourly']/value") %>%
xml_text() %>%
as.integer()
# 풍속
wind <- xml_dat %>%
xml_find_all("//wind-speed[@type='sustained']/value") %>%
xml_text() %>%
as.integer()
# 습도
humidity <- xml_dat %>%
xml_find_all("//humidity[@type='relative']/value") %>%
xml_text() %>%
as.integer()
tibble(start_time = start_time,
temperature = temperature,
wind = wind,
humidity = humidity)
devtools::install_github("massimoaria/dimensionsR")
# devtools::install_github("massimoaria/dimensionsR")
library(dimensionsR)
