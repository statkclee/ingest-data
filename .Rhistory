title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
rmarkdown::render("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: install-abbyyR
# devtools::install_github("soodoku/abbyyR", build_vignettes = TRUE)
library(abbyyR)
setapp(c(Sys.getenv("ABBYY_ID"), Sys.getenv("ABBYY_PW")))
getAppInfo()
# Chunk 3: ocr-text-korean
library(tidyverse)
library(magick)
korean_doc <- image_read("fig/Korean.jpg")
korean_doc %>%
image_resize("500x")
# Chunk 4: ocr-text-korean-process
ocr_task <- processImage(file_path = "fig/Korean.jpg", language = "Korean", exportFormat = "txtUnstructured")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=ocr_task$id)
# Chunk 5: ocr-text-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == ocr_task$id)
# Chunk 6: ocr-text-korean-process-save-display
ocred_path_filename <- glue::glue("data/{ocr_task$id}")
ocr_text <- read_lines(ocred_path_filename)
ocr_text
# Chunk 7: biz-card-image
library(tidyverse)
library(magick)
biz_card <- image_read("fig/biz_card.png")
biz_card %>%
image_resize("300x")
# Chunk 8: biz-card-ocr
biz_card_ocr <- processBusinessCard(file_path = "fig/biz_card.png", language = "Korean", exportFormat = "vCard")
Sys.sleep(5) ## 클라우드 처리 시간 보장 5초.
getTaskStatus(taskId=biz_card_ocr$id)
# Chunk 9: biz-card-korean-process-save
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
## 다운로드 받은 명함 OCR 파일 --> 확장자 부여
vCard_name <- glue::glue("data/{biz_card_ocr$id}")
system(glue::glue("mv {vCard_name} data/contact_kim.vcf"), intern = TRUE)
ocr_result %>%
select(id, registrationTime, status, local_file_path) %>%
filter(id == biz_card_ocr$id)
# Chunk 10: biz-card-korean-process-save-display
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
# Chunk 11: create-pagedown-business-cards
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 1
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
# Chunk 12: create-business-card-markdownfile
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
# Chunk 13: create-pagedown-buisness-card
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
ocr_result
biz_card_ocr$id
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
ocr_result <- getResults(output = "data/", save_to_file = TRUE)
mtcars
mtcars %>%
write_csv("data/mtcars.csv")
library(tidyverse)
mtcars %>%
write_csv("data/mtcars.csv")
library(googlesheets4)
mtcars_gsheet <- gs4_create("mtcars", sheets = mtcars)
? gs4_create
built_in_gsheet <- gs4_create("built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("_2020년/sugar_blood/data/built_in_dataset", sheets = list(mtcars=mtcars, iris=iris))
built_in_gsheet <- gs4_create("built_in_dataset",
locale = "fr_FR",
sheets = list(mtcars=mtcars, iris=iris))
googledrive::drive_get("built_in_dataset") %>%
read_sheet()
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
mtcars_gsheet <- googledrive::drive_get("built_in_dataset") %>%
read_sheet('mtcars')
? read_sheet
mtcars_df <- read_sheet("https://docs.google.com/spreadsheets/d/1yemxGzjdqtNUvvi6VsNpl7-vuX_gs5RjvfkqEW0YNRs/edit#gid=537062310", sheet = "mtcars")
mtcars_df
library(tidyverse)
library(jsonlite)
json_dat <- jsonlite::read_json("data/json_data.json")
listviewer::jsonedit(json_dat)
class(json_dat)
jsonlite::fromJSON(json_dat)
jsonlite::fromJSON("data/json_data.json")
json_dat
json_list <- jsonlite::fromJSON("data/json_data.json")
json_list
as_tibble(json_list)
json_tbl <- as_tibble(json_list)
json_tbl <- as_tibble(json_dat)
json_tbl
listviewer::jsonedit(json_list)
library(tidyverse)
library(jsonlite)
json_list <- jsonlite::fromJSON("data/json_data.json")
listviewer::jsonedit(json_list)
json_tbl <- as_tibble(json_list)
json_tbl
json_list
json_tbl <- as_tibble(json_list)
json_tbl
json_tbl
json_tbl %>%
jsonlite::toJSON()
json_tbl %>%
select(Name, Salary) %>%
jsonlite::toJSON()
json_tbl %>%
select(Name, Salary) %>%
jsonlite::toJSON() %>%
prettify(txt, indent = 4)
json_tbl %>%
select(Name, Salary) %>%
jsonlite::toJSON() %>%
prettify(., indent = 4)
json_tbl %>%
select(Name, Salary)
json_tbl %>%
select(Name, Salary) %>%
filter(Salary > 700) %>%
jsonlite::toJSON() %>%
prettify(., indent = 4)
starwars
starwars %>%
jsonlite::write_json("data/starwars.json")
starwars
? starwars
starwars %>%
jsonlite::write_json("data/starwars.json")
starwars %>%
jsonlite::write_json("data/starwars.json")
starwars_list <- jsonlite::fromJSON("data/starwars.json")
listviewer::jsonedit(starwars_list)
starwars %>%
select(name, height, sex, films) %>%
jsonlite::write_json("data/starwars.json")
starwars_list <- jsonlite::fromJSON("data/starwars.json")
listviewer::jsonedit(starwars_list)
starwars_list %>%
as_tibble()
starwars_list %>%
as_tibble() %>%
mutate(num_appearance = map_int(films, length))
starwars_list %>%
as_tibble() %>%
mutate(num_appearance = map_int(films, length)) %>%
arrange(desc(num_appearance))
starwars_list %>%
as_tibble() %>%
filter(name == "R2D2") %>%
pull(films)
starwars_list %>%
as_tibble() %>%
filter(name == "R2D2")
starwars_list %>%
as_tibble()
starwars_list %>%
as_tibble() %>%
filter(str_detect(name, "R2D2")) %>%
pull(films)
starwars_list %>%
as_tibble() %>%
filter(str_detect(name, "R2-D2")) %>%
pull(films)
starwars_list %>%
as_tibble() %>%
filter(str_detect(name, "R2-D2")) %>%
pull(films) %>%
unlist()
starwars_json <- jsonlite::fromJSON("data/starwars.json")
starwars_json
starwars_json %>%
as_tibble()
starwars_json %>%
as_tibble() %>%
unnest_wider(films)
starwars_json %>%
as_tibble() %>%
unnest(films)
starwars_json %>%
unnest_wider(films)
starwars_json %>%
unnest_longer(films)
ny_json <- fromJSON("https://data.ny.gov/api/views/9a8c-vfzj/rows.json?accessType=DOWNLOAD")
listviewer::jsonedit(ny_json)
food_df <- ny_json %>%
as_tibble
View(food_df)
food_df <- ny_json$data %>%
as_tibble
food_df <- ny_json[["data"]] %>%
as_tibble
ny_json[["data"]]
ny_json %>%
unnest_wider()
ny_json %>%
unnest_wider(data)
ny_json %>%
unnest_longer(data)
ny_json %>%
hoist(data,
city = list(7)
)
usethis::edit_r_environ()
readRenviron("~/.Renviron")
geocode <- function(address, api_key = Sys.getenv("GOOGLE_MAPS_API_KEY")) {
url <- "https://maps.googleapis.com/maps/api/geocode/json"
url <- paste0(url, "?address=", URLencode(address), "&key=", api_key)
jsonlite::read_json(url)
}
houston <- geocode("Houston TX")
houston
seoul_list <- geocode("Seoul Kore")
seoul_list
listviewer::jsonedit(seoul_list)
seoul_list <- geocode("광화문 서울")
listviewer::jsonedit(seoul_list)
seoul_list %>%
unnest_wider()
tibble(
lat = map(seoul_list, "results")
)
seoul_list$results
seoul_list$results %>%
as_tibble()
seoul_list
seoul_list %>%
as_tibble()
location_df <- tibble(
location = "광화문",
json = seoul_list
)
location_df
seoul_list <- geocode("서울시 대한민국")
location_df <- tibble(
location = "서울시",
json = seoul_list
)
location_df
location_df %>%
slice(2)
location_df %>%
slice(2) %>%
unnest(json)
location_df
location_df %>%
hoist(json,
lat = list("results", 1, "geometry", "location", "lat"),
lng = list("results", 1, "geometry", "location", "lng"))
location_df <- tibble(
location = "서울시",
json = seoul_list
) %>%
slice(1)
location_df %>%
hoist(json,
lat = list("results", 1, "geometry", "location", "lat"),
lng = list("results", 1, "geometry", "location", "lng"))
location_df
location_df %>%
unnest_wider()
location_df %>%
unnest_longer()
location_df %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json)
location_df <- tibble(
location = "서울시",
json = seoul_list
)
location_df %>%
unnest_wider(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json)
location_df %>%
unnest_longer(json)
location_df <- tibble(
location = "서울시",
json = seoul_list
)
location_df %>%
unnest_longer(json)
location_df %>%
unnest_wider(json)
location_df %>%
unnest_longer(json)
location_df <- tibble(
location = "서울시",
json = seoul_list
) %>%
slice(1)
location_df %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
unnest_wider(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry")
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry")
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest_wider(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest(json) %>%
unnest_longer(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest(json) %>%
unnest_wider(json)
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest(json) %>%
unnest_wider(json) %>%
filter(!is.na(lat))
location_df %>%
unnest_longer(json) %>%
unnest_longer(json) %>%
filter(json_id == "geometry") %>%
unnest(json) %>%
unnest_wider(json) %>%
filter(!is.na(lat)) %>%
select(location, lat, lng)
city <- c("Houston", "LA", "New York", "Chicago", "Springfield")
city_geo <- purrr::map(city, geocode)
loc <- tibble(city = city, json = city_geo)
loc
loc_tbl <- tibble(city = city, json = city_geo)
loc_tbl
loc_tbl %>%
unnest_wider(json) %>%
unnest_longer(results) %>%
unnest_wider(results) %>%
unnest_wider(geometry) %>%
unnest_wider(location)
loc_tbl %>%
unnest_wider(json) %>%
unnest_longer(results) %>%
unnest_wider(results) %>%
unnest_wider(geometry) %>%
unnest_wider(location) %>%
select(city, lat, lng)
loc_tbl %>%
unnest_wider(json) %>%
unnest_longer(results) %>%
unnest_wider(results) %>%
unnest_wider(geometry) %>%
unnest_wider(location) %>%
select(city, formatted_address, lat, lng)
loc_tbl %>%
unnest_auto(json) %>%
unnest_auto(results)
loc_tbl %>%
unnest_auto(json) %>%
unnest_auto(results) %>%
unnest_auto(results)
loc_tbl %>%
unnest_auto(json) %>%
unnest_auto(results) %>%
unnest_auto(results) %>%
unnest_auto(geometry)
loc_tbl %>%
unnest_auto(json) %>%
unnest_auto(results) %>%
unnest_auto(results) %>%
unnest_auto(geometry) %>%
unnest_auto(location)
korea_city <- c("서울시", "대전시", "속초시", "부산", "성남시")
korea_city_geo <- purrr::map(korea_city, geocode)
korea_loc_tbl <- tibble(city = korea_city, json = korea_city_geo)
korea_loc_tbl
korea_loc_tbl %>%
unnest_auto(json) %>%
unnest_auto(results) %>%
unnest_auto(results) %>%
unnest_auto(geometry) %>%
unnest_auto(location) %>%
select(city, formatted_address, lat, lng)
korea_loc_tbl %>%
hoist(json,
lat = list("results", 1, "geometry", "location", "lat"),
lng = list("results", 1, "geometry", "location", "lng")
)
korea_loc_tbl %>%
unnest_wider(json)
korea_loc_tbl %>%
unnest_wider(json) %>%
hoist(results, first_result = 1)
korea_loc_tbl %>%
unnest_wider(json) %>%
hoist(results, first_result = 1) %>%
unnest_wider(first_result) %>%
unnest_wider(geometry) %>%
unnest_wider(location)
korea_loc_tbl %>%
unnest_wider(json) %>%
hoist(results, first_result = 1) %>%
unnest_wider(first_result)
korea_loc_tbl %>%
unnest_wider(json) %>%
hoist(results, first_result = 1) %>%
unnest_wider(first_result) %>%
unnest_wider(geometry)
korea_loc_tbl %>%
unnest_wider(json) %>%
hoist(results, first_result = 1) %>%
unnest_wider(first_result) %>%
unnest_wider(geometry) %>%
unnest_wider(location)
