cat("---", "data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
cat("---", file = "data/biz_card.Rmd", append = TRUE)
read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", overwrite = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml)
cat("---", "\n", final_yml, "\n", "---")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
ymlthis::use_yml_file("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd", quiet = TRUE)
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
cat("---", "\n", final_yml, "\n", "---") %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
final_yml <- read_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
final_yml <- read_lines("data/biz_card.Rmd")
final_yml
yml_file_fixed <- cat("---", "\n", final_yml, "\n", "---")
yml_file_fixed
yml_file_fixed <- paste0("---", "\n", final_yml, "\n", "---")
yml_file_fixed
final_yml
lag(final_yml)
? lag
lag(final_yml, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
length(yml_file_fixed)
yml_file_fixed[length(yml_file_fixed)] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
lag(yml_file_fixed, default = "---")
yml_file_fixed <- lag(yml_file_fixed, default = "---")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
biz_card_path_filename <- glue::glue("data/{biz_card_ocr$id}")
biz_card_ocr_text <- read_lines(biz_card_path_filename)
biz_card_ocr_text
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
title = "&nbsp;",
name = name,
phone = phone,
email = "jane.doe@example.com",
url = "www.example.com",
address = address,
logo = "../fig/biz_card_logo.png",
.repeat = 2
)
biz_card_yml %>%
write_lines("data/biz_card.Rmd")
biz_card_yml %>%
yml_output(pagedown::business_card()) %>%
yaml::write_yaml("data/biz_card.Rmd")
yml_file_fixed <- read_lines("data/biz_card.Rmd")
yml_file_fixed[length(yml_file_fixed)+1] <- NA
yml_file_fixed <- lag(yml_file_fixed, default = "---")
yml_file_fixed[length(yml_file_fixed)+1] <- "---"
yml_file_fixed %>%
write_lines("data/biz_card.Rmd")
yml_file_fixed
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
rmarkdown::render("data/biz_card.Rmd")
htmltools::includeHTML("data/biz_card.html")
contact_vcf <- read_lines("data/contact_kim.vcf")
# 주요 정보 추출
phone <- str_extract(contact_vcf, "(?<=TEL;CHARSET=utf-8;WORK;VOICE:).*") %>%
na.omit() %>% .[1]
title <- str_extract(contact_vcf, "(?<=TITLE;CHARSET=utf-8:).*") %>% na.omit()
name <- str_extract(contact_vcf, "(?<=FN;CHARSET=utf-8:).*") %>% na.omit()
address <- str_extract(contact_vcf, "(?<=ADR;CHARSET=utf-8;WORK:).*") %>%
na.omit() %>% .[1]
## 명함생성을 위한 사전 작업
library(ymlthis)
biz_card_yml <- pagedown_business_card_template(
# 1. 데이터 받아오기 -----
## 1.1 POST() 함수를 사용하여 개표 결과를 수집합니다.
resp <- POST(
url = 'https://www.kipa.re.kr/site/kipa/conflict/selectCaseList.do',
body = list(
pageIndex       = "1",
searchStartYear = "1950",
searchEndYear="",
searchConfCause="",
searchBizType="",
searchConfType="",
searchConfSubject="",
searchCondition="all",
searchKeyword=""
)
)
library(tidyverse)
library(httr)
library(rvest)
# 1. 데이터 받아오기 -----
## 1.1 POST() 함수를 사용하여 개표 결과를 수집합니다.
resp <- POST(
url = 'https://www.kipa.re.kr/site/kipa/conflict/selectCaseList.do',
body = list(
pageIndex       = "1",
searchStartYear = "1950",
searchEndYear="",
searchConfCause="",
searchBizType="",
searchConfType="",
searchConfSubject="",
searchCondition="all",
searchKeyword=""
)
)
content(x = resp, as = 'text') %>%
read_html()
content(x = resp, as = 'text') %>%
read_html() %>%
html_node(xpath = '//*[@id="ConflictCaseVo"]/div/table[2]') %>%
html_table(fill=TRUE) %>%
janitor::clean_names() %>%
as_tibble()
conflict_tbl <- content(x = resp, as = 'text') %>%
read_html() %>%
html_node(xpath = '//*[@id="ConflictCaseVo"]/div/table[2]') %>%
html_table(fill=TRUE) %>%
# janitor::clean_names() %>%
as_tibble()
conflict_tbl
library(tidyverse)
library(httr)
library(rvest)
# 1. 데이터 받아오기 -----
## 1.1 POST() 함수를 사용하여 개표 결과를 수집합니다.
resp <- POST(
url = 'https://www.kipa.re.kr/site/kipa/conflict/selectCaseList.do',
body = list(
pageIndex         = "1",
searchStartYear   = "",
searchEndYear     = "",
searchConfCause   = "",
searchBizType     = "",
searchConfType    = "",
searchConfSubject = "",
searchCondition   = "all",
searchKeyword     = ""
)
)
conflict_tbl <- content(x = resp, as = 'text') %>%
read_html() %>%
html_node(xpath = '//*[@id="ConflictCaseVo"]/div/table[2]') %>%
html_table(fill=TRUE) %>%
# janitor::clean_names() %>%
as_tibble()
conflict_tbl
get_conflict_cases <- function(page_index) {
resp <- POST(
url = 'https://www.kipa.re.kr/site/kipa/conflict/selectCaseList.do',
body = list(
pageIndex         = page_index,
searchStartYear   = "",
searchEndYear     = "",
searchConfCause   = "",
searchBizType     = "",
searchConfType    = "",
searchConfSubject = "",
searchCondition   = "all",
searchKeyword     = ""
)
)
conflict_tbl <- content(x = resp, as = 'text') %>%
read_html() %>%
html_node(xpath = '//*[@id="ConflictCaseVo"]/div/table[2]') %>%
html_table(fill=TRUE) %>%
# janitor::clean_names() %>%
as_tibble()
return(conflict_tbl)
}
get_conflict_cases("49")
page_index_vec <- str_pad(1:49, width = 2, side = "left", pad = "0")
page_index_vec
page_index_vec <- str_pad(1:49, width = 2, side = "left", pad = "0")
conflict_DB_tbl <- map_df(page_index_vec, get_conflict_cases)
conflict_DB_tbl %>%
write_rds("data/conflict_DB_tbl.rds")
get_conflict_cases(1)
get_conflict_cases(10)
get_conflict_cases(20)
conflict_DB_tbl <- map_df(1:49, get_conflict_cases)
conflict_DB_tbl %>%
reactable::reactable()
conflict_DB_tbl %>%
write_rds("data/conflict_DB_tbl.rds")
library(googledrive)
drive_auth()
library(tidyverse)
library(googledrive)
drive_find(type = "spreadsheet")
drive_find(type = "excel")
drive_find(type = "application/excel")
drive_find(type = "application/xlsx")
drive_find(type = "xlsx")
drive_find(type = "xls")
drive_find(type = "spreadsheet")
spreadsheet_list <- drive_find(type = "spreadsheet")
spreadsheet_list
spreadsheet_list %>%
filter(str_detect(name, "발표자"))
spreadsheet_list %>%
filter(str_detect(name, "발표자")) %>%
pull(id)
get_file_id <- spreadsheet_list %>%
filter(str_detect(name, "발표자")) %>%
pull(id)
googlesheets4::read_sheet(get_file_id)
presenter <- googlesheets4::read_sheet(get_file_id)
presenter %>%
janitor::clean_names(ascii = FALSE)
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5)
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(발표자명))
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5))
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
spreadsheet_list
drive_download(발표자_대쉬보드, path = "data/rconf_presenter.xlsx")
? drive_download
file_id <- spreadsheet_list %>%
filter(str_detect(name, "발표자")) %>%
pull(id)
presenter <- googlesheets4::read_sheet(file_id)
presenter
drive_download(file_id, path = "data/rconf_presenter.xlsx", overwrite = TRUE, type = "csv")
drive_download(file_id, path = "data/rconf_presenter", overwrite = TRUE, type = "csv")
drive_download(file_id, path = "data/rconf_presenter", overwrite = TRUE, type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
library(readxl)
rconf_tbl <- read_excel("data/rconf_presenter")
rconf_tbl <- read_excel("data/rconf_presenter.xlsx")
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
rconf_tbl %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
install.packages("writexl")
library(writexl)
rconf_tbl %>%
write_xlsx("data/rconf.xlsx")
drive_upload("data/rconf.xlsx",
path = "submission/rconf.xlsx",
type = "spreadsheet")
rconf_raw <- read_excel("data/rconf_presenter.xlsx")
rconf_tbl <- rconf_raw %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5))
rconf_tbl %>%
DT::datatable()
rconf_tbl
rconf_tbl %>%
write_xlsx("data/rconf.xlsx")
drive_upload("data/rconf.xlsx",
path = "submission/rconf.xlsx",
type = "spreadsheet")
drive_upload("data/rconf.xlsx",
path = "submission/rconf.xlsx",
type = "spreadsheet",
overwrite = TRUE)
spreadsheet_list <- drive_find(type = "spreadsheet")
spreadsheet_list
file_id <- spreadsheet_list %>%
filter(str_detect(name, "발표자")) %>%
pull(id)
file_id
presenter <- googlesheets4::read_sheet(file_id)
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
spreadsheet_list
presenter
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: googledrive-find
library(tidyverse)
library(googledrive)
spreadsheet_list <- drive_find(type = "spreadsheet")
spreadsheet_list
# Chunk 3: googledrive-read-file
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드")) %>%
pull(id)
# presenter <- googlesheets4::read_sheet(file_id)
#
# presenter %>%
#   janitor::clean_names(ascii = FALSE) %>%
#   select(1:5) %>%
#   filter(!is.na(구분_5)) %>%
#   DT::datatable()
# Chunk 4: googledrive-download-file
## CSV -----
drive_download(file_id, path = "data/rconf_presenter", overwrite = TRUE, type = "csv")
## 엑셀 -----
drive_download(file_id, path = "data/rconf_presenter", overwrite = TRUE, type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
# Chunk 5: googledrive-download-file-check
library(readxl)
rconf_raw <- read_excel("data/rconf_presenter.xlsx")
rconf_tbl <- rconf_raw %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5))
rconf_tbl %>%
DT::datatable()
# Chunk 6: writexl-drive-upload
library(writexl)
rconf_tbl %>%
write_xlsx("data/rconf.xlsx")
drive_upload("data/rconf.xlsx",
path = "submission/rconf.xlsx",
type = "spreadsheet",
overwrite = TRUE)
file_id
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드")) %>%
pull(id)
file_id
file_id %>% class()
as_id(file_id)
drive_get(as_id(file_id))
presenter <- googlesheets4::read_sheet(drive_get(as_id(file_id)))
presenter <- googlesheets4::read_sheet(drive_get(file_id))
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드"))
presenter <- googlesheets4::read_sheet(file_id)
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
drive_user
drive_user()
gs4_user()
library(googlesheets4)
gs4_user()
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: googledrive-find
library(tidyverse)
library(googledrive)
library(googlesheets4)
spreadsheet_list <- drive_find(type = "spreadsheet")
spreadsheet_list
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드"))
file_id
presenter <- googlesheets4::read_sheet(file_id)
gs4_get(file_id)
? drive_find
drive_find(q = "name contains '대쉬보드'")
file_id <- drive_get(q = "name contains '대쉬보드'")
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드"))
presenter <- googlesheets4::read_sheet(drive_get(file_id))
gs4_get(file_id)
presenter %>%
janitor::clean_names(ascii = FALSE) %>%
select(1:5) %>%
filter(!is.na(구분_5)) %>%
DT::datatable()
file_id <- spreadsheet_list %>%
filter(str_detect(name, "대쉬보드")) %>%
pull(id)
presenter <- googlesheets4::read_sheet(drive_get(file_id))
file_id
drive_get(file_id)
drive_get("발표자_대쉬보드")
presenter <- googlesheets4::read_sheet(drive_get("발표자_대쉬보드"))
drive_get("발표자_대쉬보드")
spreadsheet_list
library(tidyverse)
library(googledrive)
library(googlesheets4)
spreadsheet_list <- drive_find(type = "spreadsheet")
spreadsheet_list
drive_get("dashboard")
spreadsheet_list
file_id <- drive_get("rconf")
presenter <- googlesheets4::read_sheet(file_id)
spreadsheet_list
